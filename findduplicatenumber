"""
#find duplicate number
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive). 
Prove that at least one duplicate number must exist. 
Assume that there is only one duplicate number but it could be repeated more than once. 
Find the duplicate number.

Example 1: 
Input: [1,3,4,2,2]
Output: 2

Example 2:
Input: [3,1,3,4,2]
Output: 3

#Note: You must not modify the array (assume ghe array is read only).
You must use only constant, 0(1) extra space.
Your runtime complexity should be less than 0(n2).
There is only one duplicate number in the array, but it could be repeated more than once.

#not Pigeonhole Principle!
#not hashmap data structure, std: :map<std: : string, int> mapOfInches = {"name": 4}
def findDuplicate(nums):
    seen = {}
    for num in nums:
        if num in seen:
            return num
        sseen[num] = True
        
print(findDuplicate([3,1,3,4,2]))

#floyd's tortoise and hare - simple cycle detection algorithm """

def findDuplicate(nums):
    tortoise = nums[0]
    hare = nums[0]
    while True:
    tortoise = nums[tortoise]
    hare = nums[nums[hare]]
    if tortoise == hare:
           break
           
    ptr1 = nums[0]
    ptr2 = tortoise
    while ptr1 != ptr2:
        ptr1 = nums[ptr1]
        ptr2 = nums[ptr2]
        
     return ptr1

print(findDuplicate([3,1,3,4,2]))
